/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.abstractj.kalium;

public class Sodium {
  public static String sodium_version_string() {
    return SodiumJNI.sodium_version_string();
  }

  public static int crypto_aead_chacha20poly1305_encrypt(byte[] c, int[] clen, byte[] m, int mlen, byte[] ad, int adlen, byte[] nsec, byte[] npub, byte[] k) {
    return SodiumJNI.crypto_aead_chacha20poly1305_encrypt(c, clen, m, mlen, ad, adlen, nsec, npub, k);
  }

  public static int crypto_aead_chacha20poly1305_decrypt(byte[] m, int[] mlen, byte[] nsec, byte[] c, int clen, byte[] ad, int adlen, byte[] npub, byte[] k) {
    return SodiumJNI.crypto_aead_chacha20poly1305_decrypt(m, mlen, nsec, c, clen, ad, adlen, npub, k);
  }

  public static int crypto_hash_sha256(byte[] out, byte[] in, int inlen) {
    return SodiumJNI.crypto_hash_sha256(out, in, inlen);
  }

  public static int crypto_hash_sha512(byte[] out, byte[] in, int inlen) {
    return SodiumJNI.crypto_hash_sha512(out, in, inlen);
  }

  public static int crypto_generichash_blake2b(byte[] out, long outlen, byte[] in, int inlen, byte[] key, long keylen) {
    return SodiumJNI.crypto_generichash_blake2b(out, outlen, in, inlen, key, keylen);
  }

  public static int crypto_box_curve25519xsalsa20poly1305_keypair(byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_box_curve25519xsalsa20poly1305_keypair(pk, sk);
  }

  public static void randombytes(byte[] buf, int size) {
    SodiumJNI.randombytes(buf, size);
  }

  public static int crypto_box_curve25519xsalsa20poly1305(byte[] c, byte[] m, int mlen, byte[] n, byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_box_curve25519xsalsa20poly1305(c, m, mlen, n, pk, sk);
  }

  public static int crypto_box_curve25519xsalsa20poly1305_open(byte[] m, byte[] c, int clen, byte[] n, byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_box_curve25519xsalsa20poly1305_open(m, c, clen, n, pk, sk);
  }

  public static int crypto_scalarmult_curve25519(byte[] q, byte[] n, byte[] p) {
    return SodiumJNI.crypto_scalarmult_curve25519(q, n, p);
  }

  public static int crypto_secretbox_xsalsa20poly1305(byte[] c, byte[] m, int mlen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_secretbox_xsalsa20poly1305(c, m, mlen, n, k);
  }

  public static int crypto_secretbox_xsalsa20poly1305_open(byte[] m, byte[] c, int clen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_secretbox_xsalsa20poly1305_open(m, c, clen, n, k);
  }

  public static int crypto_sign_ed25519_seed_keypair(byte[] pk, byte[] sk, byte[] seed) {
    return SodiumJNI.crypto_sign_ed25519_seed_keypair(pk, sk, seed);
  }

  public static int crypto_sign_ed25519(byte[] sm, int[] smlen, byte[] m, int mlen, byte[] sk) {
    return SodiumJNI.crypto_sign_ed25519(sm, smlen, m, mlen, sk);
  }

  public static int crypto_sign_ed25519_open(byte[] m, int[] mlen, byte[] sm, int smlen, byte[] pk) {
    return SodiumJNI.crypto_sign_ed25519_open(m, mlen, sm, smlen, pk);
  }

  public static int crypto_box_keypair(byte[] pk, byte[] sk) {
    return SodiumJNI.crypto_box_keypair(pk, sk);
  }

  public static void randombytes_buf(SWIGTYPE_p_void buf, long size) {
    SodiumJNI.randombytes_buf(SWIGTYPE_p_void.getCPtr(buf), size);
  }

  public static int crypto_scalarmult_base(byte[] q, byte[] n) {
    return SodiumJNI.crypto_scalarmult_base(q, n);
  }

  public static int crypto_scalarmult(byte[] q, byte[] n, byte[] p) {
    return SodiumJNI.crypto_scalarmult(q, n, p);
  }

  public static int crypto_sign(byte[] sm, int[] smlen, byte[] m, int mlen, byte[] sk) {
    return SodiumJNI.crypto_sign(sm, smlen, m, mlen, sk);
  }

  public static int crypto_sign_open(byte[] m, int[] mlen, byte[] sm, int smlen, byte[] pk) {
    return SodiumJNI.crypto_sign_open(m, mlen, sm, smlen, pk);
  }

  public static int crypto_secretbox(byte[] c, byte[] m, int mlen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_secretbox(c, m, mlen, n, k);
  }

  public static int crypto_secretbox_open(byte[] m, byte[] c, int clen, byte[] n, byte[] k) {
    return SodiumJNI.crypto_secretbox_open(m, c, clen, n, k);
  }

  public static String sodium_bin2hex(String hex, long hex_maxlen, byte[] bin, long bin_len) {
    return SodiumJNI.sodium_bin2hex(hex, hex_maxlen, bin, bin_len);
  }

  public static int sodium_hex2bin(byte[] bin, long bin_maxlen, String hex, long hex_len, String ignore, SWIGTYPE_p_size_t bin_len, SWIGTYPE_p_p_char hex_end) {
    return SodiumJNI.sodium_hex2bin(bin, bin_maxlen, hex, hex_len, ignore, SWIGTYPE_p_size_t.getCPtr(bin_len), SWIGTYPE_p_p_char.getCPtr(hex_end));
  }

}
